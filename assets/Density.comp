#version 460 core

#define LOCAL_DIM 10

layout(std430, binding = 5) writeonly buffer DensityBuffer
{
    float densities[];
};

layout(local_size_x = LOCAL_DIM, local_size_y = LOCAL_DIM, local_size_z = LOCAL_DIM) in;

const int permutation[256] = int[256](
    151, 160, 137, 91, 90, 15,
    131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23,
    190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33,
    88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166,
    77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244,
    102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196,
    135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123,
    5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42,
    223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9,
    129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228,
    251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107,
    49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,
    138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180
);

// Gradient table
const vec3 g[16] = vec3[](
    vec3(1, 1, 0), vec3(-1, 1, 0), vec3(1, -1, 0), vec3(-1, -1, 0),
    vec3(1, 0, 1), vec3(-1, 0, 1), vec3(1, 0, -1), vec3(-1, 0, -1),
    vec3(0, 1, 1), vec3(0, -1, 1), vec3(0, 1, -1), vec3(0, -1, -1),
    vec3(1, 1, 0), vec3(0, -1, 1), vec3(-1, 1, 0), vec3(0, -1, -1)
);

// Function to fade
vec3 fade(vec3 t) {
    return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);
}

// Function to compute permutation value
int perm(uint x) {
    return permutation[x & 255U];
}

// Function to compute gradient value
float grad(int hash, vec3 p) {
    int h = hash & 15;                           // CONVERT LO 4 BITS OF HASH CODE
    float u = h < 8 ? p.x : p.y;                 // INTO 12 GRADIENT DIRECTIONS.
    float v = h < 4          ? p.y :
          h == 12 || h == 14 ? p.x :
                               p.z;
    return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);
}

// 3D Perlin noise function
float perlin(vec3 p) {
    uvec3 P = uvec3(p) & 255u; // find unic cube that contains the point
    p -= floor(p);            // find relative position in the cube
    vec3 f = fade(p);

    uint A = perm(P.x) + P.y;
    uint AA = perm(A) + P.z;
    uint AB = perm(A + 1u) + P.z;
    uint B = perm(P.x + 1u) + P.y;
    uint BA = perm(B) + P.z;
    uint BB = perm(B + 1u) + P.z;

    return mix(
        mix(
            mix(grad(perm(AA), p),                        grad(perm(BA), p + vec3(-1.0,  0.0, 0.0)), f.x),
            mix(grad(perm(AB), p + vec3(0.0, -1.0, 0.0)), grad(perm(BB), p + vec3(-1.0, -1.0, 0.0)), f.x),
            f.y
        ),
        mix(
            mix(grad(perm(AA + 1U), p + vec3(0.0,  0.0, -1.0)), grad(perm(BA + 1u), p + vec3(-1.0,  0.0, -1.0)), f.x),
            mix(grad(perm(AB + 1U), p + vec3(0.0, -1.0, -1.0)), grad(perm(BB + 1u), p + vec3(-1.0, -1.0, -1.0)), f.x),
            f.y
        ),
        f.z
    );
}

void main()
{
    uvec3 computeDim = gl_NumWorkGroups * gl_WorkGroupSize;

    uint idx = gl_GlobalInvocationID.z * computeDim.y * computeDim.x
    + gl_GlobalInvocationID.y * computeDim.x
    + gl_GlobalInvocationID.x;

    vec3 worldPosition = gl_GlobalInvocationID / vec3(computeDim - 1);

    // Adjust the scale and frequency based on your needs
    float scale = 3.0;
    float frequency = 0.5;

    // Use 3D Perlin noise for density
    float noise3D = perlin(worldPosition * scale * frequency);

    // Set a threshold value based on the Perlin noise
    float threshold = 0.5;

    // Modify the density based on the Perlin noise
    float density = (noise3D > threshold) ? 1.0 : -1.0;

    // Write the density value to the buffer
    densities[idx] = density;
    memoryBarrier(); // Ensure densities[idx] is written before continuing
}